name: CI/CD Security Pipeline

on:
  workflow_call:
    inputs:
      force_full_scan:
        required: false
        type: boolean
        default: false
      cvss_threshold:
        required: false
        type: string
        default: "7.0"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      NVD_API_KEY:
        required: false

jobs:
  # Job de d√©tection pour optimiser les analyses 
  detect-context:
    name: üîç Detect Project Context
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect-langs.outputs.languages }}
      frameworks: ${{ steps.detect-frameworks.outputs.frameworks }}
      angular_version: ${{ steps.detect-angular-version.outputs.angular_version }}
      node_version: ${{ steps.determine-node.outputs.node_version }}
      branch_type: ${{ steps.branch-context.outputs.branch_type }}
      is_feature_branch: ${{ steps.branch-context.outputs.is_feature_branch }}
      is_dev_test: ${{ steps.branch-context.outputs.is_dev_test }}
      is_main: ${{ steps.branch-context.outputs.is_main }}
      is_pr_to_dev: ${{ steps.branch-context.outputs.is_pr_to_dev }}
      is_pr_to_main: ${{ steps.branch-context.outputs.is_pr_to_main }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze branch context
        id: branch-context
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Target branch: ${{ github.base_ref }}"
          
          # D√©terminer le type de branche et les actions
          is_feature_branch=false
          is_dev_test=false
          is_main=false
          is_pr_to_dev=false
          is_pr_to_main=false
          branch_type="unknown"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "dev_test" ]]; then
              is_pr_to_dev=true
              branch_type="pr_to_dev"
            elif [[ "${{ github.base_ref }}" == "main" ]]; then
              is_pr_to_main=true
              branch_type="pr_to_main"
            fi
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            is_main=true
            branch_type="main"
          elif [[ "${{ github.ref_name }}" == "dev_test" ]]; then
            is_dev_test=true
            branch_type="dev_test"
          else
            is_feature_branch=true
            branch_type="feature"
          fi
          
          echo "branch_type=$branch_type" >> $GITHUB_OUTPUT
          echo "is_feature_branch=$is_feature_branch" >> $GITHUB_OUTPUT
          echo "is_dev_test=$is_dev_test" >> $GITHUB_OUTPUT
          echo "is_main=$is_main" >> $GITHUB_OUTPUT
          echo "is_pr_to_dev=$is_pr_to_dev" >> $GITHUB_OUTPUT
          echo "is_pr_to_main=$is_pr_to_main" >> $GITHUB_OUTPUT

      - name: Detect languages
        id: detect-langs
        run: |
          langs=$(gh api repos/${{ github.repository }}/languages --jq 'keys | join(",")')
          echo "languages=$langs" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect frameworks
        id: detect-frameworks
        run: |
          frameworks=""
          if [ -f package.json ]; then
            if grep -q '"@angular/core"' package.json; then
              frameworks+="Angular,"
            fi
            if grep -q '"react"' package.json; then
              frameworks+="React,"
            fi
            if grep -q '"express"' package.json; then
              frameworks+="Express,"
            fi
            if grep -q '"next"' package.json; then
              frameworks+="Next,"
            fi
          fi
          if [ -f requirements.txt ]; then
            if grep -qi 'django' requirements.txt; then
              frameworks+="Django,"
            fi
            if grep -qi 'flask' requirements.txt; then
              frameworks+="Flask,"
            fi
          fi
          echo "frameworks=$frameworks" >> $GITHUB_OUTPUT

      - name: Detect Angular version
        id: detect-angular-version
        run: |
          version=""
          if [ -f package.json ]; then
            version=$(jq -r '.dependencies["@angular/core"] // empty' package.json | sed 's/[^0-9.]//g' | cut -d '.' -f1)
          fi
          echo "angular_version=$version" >> $GITHUB_OUTPUT
          
      - name: Determine Node.js version from Angular version
        id: determine-node
        run: |
          angular_version="${{ steps.detect-angular-version.outputs.angular_version }}"
          node_version="20"  # valeur par d√©faut
          
          if [ "$angular_version" = "17" ]; then
            node_version="20"
          elif [ "$angular_version" = "16" ]; then
            node_version="18"
          elif [ "$angular_version" = "15" ]; then
            node_version="16"
          elif [ "$angular_version" = "13" ]; then
            node_version="12"
          fi
          echo "node_version=$node_version" >> $GITHUB_OUTPUT

  # =================== FEATURE BRANCHES ===================
  # Analyses l√©g√®res sur les branches de feature (push direct)
  feature-branch-checks:
    name: üîß Feature Branch Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_feature_branch == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/feature-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== PULL REQUEST TO DEV_TEST ===================
  # Analyses compl√®tes incluant ZAP pour les PR vers dev_test
  pr-to-dev-checks:
    name: üß™ Dev Test PR Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_pr_to_dev == 'true'
    uses: ./.github/workflows/dev-pr-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== PULL REQUEST TO MAIN ===================
  # Analyses de production pour les PR vers main
  pr-to-main-checks:
    name: üöÄ Production PR Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_pr_to_main == 'true'
    uses: ./.github/workflows/prod-pr-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== DEV_TEST BRANCH ===================
  # Analyses lors des push sur dev_test
  dev-test-checks:
    name: üß™ Dev Test Branch Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_dev_test == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/dev-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== MAIN BRANCH ===================
  # Analyses de production lors des push sur main
  main-branch-checks:
    name: üöÄ Production Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_main == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/prod-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

 ================ SECURITY ISSUE CREATION ===================
  # Cr√©ation/Mise √† jour d'issues en cas de vuln√©rabilit√©s critiques
  create-security-issues:
    name: üõë Security Issue Management
    runs-on: ubuntu-latest
    needs: [detect-context, feature-branch-checks, pr-to-dev-checks, pr-to-main-checks, dev-test-checks, main-branch-checks]
    if: always() && (needs.feature-branch-checks.result == 'success' || needs.pr-to-dev-checks.result == 'success' || needs.pr-to-main-checks.result == 'success' || needs.dev-test-checks.result == 'success' || needs.main-branch-checks.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-report"
          merge-multiple: true
          path: reports
        continue-on-error: true

      - name: Find existing security issues
        id: find-issues
        run: |
          echo "üîç Recherche d'issues de s√©curit√© existantes..."
          
          # Chercher les issues ouvertes avec les labels de s√©curit√©
          existing_issues=$(gh issue list --state open --label "security,automated" --json number,title,body --limit 100)
          echo "existing_issues<<EOF" >> $GITHUB_OUTPUT
          echo "$existing_issues" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Extraire les num√©ros d'issues par branche/contexte
          sonar_issue=$(echo "$existing_issues" | jq -r '.[] | select(.title | contains("SonarQube Security")) | .number')
          zap_issue=$(echo "$existing_issues" | jq -r '.[] | select(.title | contains("OWASP ZAP Security")) | .number')
          dependency_issue=$(echo "$existing_issues" | jq -r '.[] | select(.title | contains("Dependency Security")) | .number')
          
          echo "sonar_issue_number=${sonar_issue:-}" >> $GITHUB_OUTPUT
          echo "zap_issue_number=${zap_issue:-}" >> $GITHUB_OUTPUT
          echo "dependency_issue_number=${dependency_issue:-}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Check for critical findings
        id: check-findings
        run: |
          critical=false
          findings_summary=""
          sonar_findings=""
          zap_findings=""
          dependency_findings=""
          
          if [ -d "reports" ]; then
            echo "üîç Analysing security reports..."
            
            # Analyse des rapports SonarQube
            if [ -f "reports/sonar-report.json" ]; then
              sonar_critical=$(jq -r '.issues[] | select(.severity == "BLOCKER" or .severity == "CRITICAL") | "\(.rule): \(.message)"' reports/sonar-report.json 2>/dev/null || echo "")
              if [ -n "$sonar_critical" ]; then
                sonar_findings="$sonar_critical"
                critical=true
              fi
            fi
            
            # Analyse des rapports OWASP ZAP
            if [ -f "reports/zap-report.xml" ]; then
              zap_critical=$(xmllint --xpath "//alertitem[riskdesc[starts-with(text(),'High') or starts-with(text(),'Critical')]]/name/text()" reports/zap-report.xml 2>/dev/null || echo "")
              if [ -n "$zap_critical" ]; then
                zap_findings="$zap_critical"
                critical=true
              fi
            fi
            
            # Analyse des d√©pendances
            if [ -f "reports/audit-report.json" ]; then
              dependency_critical=$(jq -r '.vulnerabilities[] | select(.severity == "critical" or .severity == "high") | "\(.title): \(.module_name)"' reports/audit-report.json 2>/dev/null || echo "")
              if [ -n "$dependency_critical" ]; then
                dependency_findings="$dependency_critical"
                critical=true
              fi
            fi
          fi
          
          echo "critical_found=$critical" >> $GITHUB_OUTPUT
          echo "sonar_findings<<EOF" >> $GITHUB_OUTPUT
          echo "$sonar_findings" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "zap_findings<<EOF" >> $GITHUB_OUTPUT
          echo "$zap_findings" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "dependency_findings<<EOF" >> $GITHUB_OUTPUT
          echo "$dependency_findings" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Close resolved security issues
        if: steps.check-findings.outputs.critical_found == 'false'
        run: |
          echo "üéâ Aucune vuln√©rabilit√© critique trouv√©e - fermeture des issues existantes"
          
          # Fermer les issues SonarQube r√©solues
          if [ -n "${{ steps.find-issues.outputs.sonar_issue_number }}" ] && [ -z "${{ steps.check-findings.outputs.sonar_findings }}" ]; then
            gh issue close ${{ steps.find-issues.outputs.sonar_issue_number }} --comment "‚úÖ Vuln√©rabilit√©s SonarQube r√©solues dans le commit ${{ github.sha }}"
          fi
          
          # Fermer les issues ZAP r√©solues
          if [ -n "${{ steps.find-issues.outputs.zap_issue_number }}" ] && [ -z "${{ steps.check-findings.outputs.zap_findings }}" ]; then
            gh issue close ${{ steps.find-issues.outputs.zap_issue_number }} --comment "‚úÖ Vuln√©rabilit√©s OWASP ZAP r√©solues dans le commit ${{ github.sha }}"
          fi
          
          # Fermer les issues de d√©pendances r√©solues
          if [ -n "${{ steps.find-issues.outputs.dependency_issue_number }}" ] && [ -z "${{ steps.check-findings.outputs.dependency_findings }}" ]; then
            gh issue close ${{ steps.find-issues.outputs.dependency_issue_number }} --comment "‚úÖ Vuln√©rabilit√©s de d√©pendances r√©solues dans le commit ${{ github.sha }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update SonarQube security issue
        if: steps.check-findings.outputs.sonar_findings != ''
        run: |
          BRANCH="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ISSUE_BODY="## üîç Vuln√©rabilit√©s SonarQube d√©tect√©es

          **Branche:** \`$BRANCH\`  
          **Commit:** \`$COMMIT\`  
          **Analyse:** $DATE  
          **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### üö® Vuln√©rabilit√©s trouv√©es:
          \`\`\`
          ${{ steps.check-findings.outputs.sonar_findings }}
          \`\`\`

          ### üìã Actions requises:
          - [ ] Analyser les vuln√©rabilit√©s list√©es ci-dessus
          - [ ] Corriger le code source selon les recommandations SonarQube
          - [ ] V√©rifier que les corrections n'introduisent pas de r√©gressions
          - [ ] Relancer l'analyse de s√©curit√©

          ---
          *Issue mise √† jour automatiquement par le pipeline de s√©curit√©*"
          
          if [ -n "${{ steps.find-issues.outputs.sonar_issue_number }}" ]; then
            echo "üìù Mise √† jour de l'issue SonarQube existante #${{ steps.find-issues.outputs.sonar_issue_number }}"
            gh issue edit ${{ steps.find-issues.outputs.sonar_issue_number }} --body "$ISSUE_BODY"
            gh issue comment ${{ steps.find-issues.outputs.sonar_issue_number }} --body "üîÑ Issue mise √† jour avec les derni√®res vuln√©rabilit√©s d√©tect√©es dans le commit $COMMIT"
          else
            echo "üÜï Cr√©ation d'une nouvelle issue SonarQube"
            gh issue create \
              --title "üîç SonarQube Security Alert - $BRANCH" \
              --body "$ISSUE_BODY" \
              --label "security,automated,sonarqube,critical" \
              --assignee "${{ github.actor }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update OWASP ZAP security issue
        if: steps.check-findings.outputs.zap_findings != ''
        run: |
          BRANCH="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ISSUE_BODY="## üõ°Ô∏è Vuln√©rabilit√©s OWASP ZAP d√©tect√©es

          **Branche:** \`$BRANCH\`  
          **Commit:** \`$COMMIT\`  
          **Analyse:** $DATE  
          **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### üö® Vuln√©rabilit√©s trouv√©es:
          \`\`\`
          ${{ steps.check-findings.outputs.zap_findings }}
          \`\`\`

          ### üìã Actions requises:
          - [ ] Analyser les vuln√©rabilit√©s de s√©curit√© web d√©tect√©es
          - [ ] Corriger les failles de s√©curit√© dans l'application
          - [ ] Tester les corrections en local
          - [ ] Relancer l'analyse OWASP ZAP

          ---
          *Issue mise √† jour automatiquement par le pipeline de s√©curit√©*"
          
          if [ -n "${{ steps.find-issues.outputs.zap_issue_number }}" ]; then
            echo "üìù Mise √† jour de l'issue OWASP ZAP existante #${{ steps.find-issues.outputs.zap_issue_number }}"
            gh issue edit ${{ steps.find-issues.outputs.zap_issue_number }} --body "$ISSUE_BODY"
            gh issue comment ${{ steps.find-issues.outputs.zap_issue_number }} --body "üîÑ Issue mise √† jour avec les derni√®res vuln√©rabilit√©s d√©tect√©es dans le commit $COMMIT"
          else
            echo "üÜï Cr√©ation d'une nouvelle issue OWASP ZAP"
            gh issue create \
              --title "üõ°Ô∏è OWASP ZAP Security Alert - $BRANCH" \
              --body "$ISSUE_BODY" \
              --label "security,automated,owasp-zap,critical" \
              --assignee "${{ github.actor }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update Dependency security issue
        if: steps.check-findings.outputs.dependency_findings != ''
        run: |
          BRANCH="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ISSUE_BODY="## üì¶ Vuln√©rabilit√©s de d√©pendances d√©tect√©es

          **Branche:** \`$BRANCH\`  
          **Commit:** \`$COMMIT\`  
          **Analyse:** $DATE  
          **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### üö® D√©pendances vuln√©rables:
          \`\`\`
          ${{ steps.check-findings.outputs.dependency_findings }}
          \`\`\`

          ### üìã Actions requises:
          - [ ] Mettre √† jour les d√©pendances vuln√©rables vers des versions s√©curis√©es
          - [ ] V√©rifier la compatibilit√© apr√®s mise √† jour
          - [ ] Tester l'application avec les nouvelles versions
          - [ ] Relancer l'audit de s√©curit√© des d√©pendances

          ---
          *Issue mise √† jour automatiquement par le pipeline de s√©curit√©*"
          
          if [ -n "${{ steps.find-issues.outputs.dependency_issue_number }}" ]; then
            echo "üìù Mise √† jour de l'issue de d√©pendances existante #${{ steps.find-issues.outputs.dependency_issue_number }}"
            gh issue edit ${{ steps.find-issues.outputs.dependency_issue_number }} --body "$ISSUE_BODY"
            gh issue comment ${{ steps.find-issues.outputs.dependency_issue_number }} --body "üîÑ Issue mise √† jour avec les derni√®res vuln√©rabilit√©s d√©tect√©es dans le commit $COMMIT"
          else
            echo "üÜï Cr√©ation d'une nouvelle issue de d√©pendances"
            gh issue create \
              --title "üì¶ Dependency Security Alert - $BRANCH" \
              --body "$ISSUE_BODY" \
              --label "security,automated,dependencies,critical" \
              --assignee "${{ github.actor }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "## üìä R√©sum√© de l'analyse de s√©curit√©" >> $GITHUB_STEP_SUMMARY
          echo "**Branche analys√©e:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-findings.outputs.critical_found }}" == "true" ]; then
            echo "üö® **Des vuln√©rabilit√©s critiques ont √©t√© d√©tect√©es !**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${{ steps.check-findings.outputs.sonar_findings }}" ]; then
              echo "- üîç Vuln√©rabilit√©s SonarQube d√©tect√©es" >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "${{ steps.check-findings.outputs.zap_findings }}" ]; then
              echo "- üõ°Ô∏è Vuln√©rabilit√©s OWASP ZAP d√©tect√©es" >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "${{ steps.check-findings.outputs.dependency_findings }}" ]; then
              echo "- üì¶ Vuln√©rabilit√©s de d√©pendances d√©tect√©es" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Les issues GitHub ont √©t√© cr√©√©es ou mises √† jour avec les d√©tails des vuln√©rabilit√©s." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Aucune vuln√©rabilit√© critique d√©tect√©e**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Les issues de s√©curit√© existantes ont √©t√© ferm√©es si elles √©taient r√©solues." >> $GITHUB_STEP_SUMMARY
          fi
