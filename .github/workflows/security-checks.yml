name: CI/CD Security Pipeline

on:
  workflow_call:
    inputs:
      force_full_scan:
        required: false
        type: boolean
        default: false
      cvss_threshold:
        required: false
        type: string
        default: "7.0"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      NVD_API_KEY:
        required: false

jobs:
  # Job de détection pour optimiser les analyses 
  detect-context:
    name: 🔍 Detect Project Context
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect-langs.outputs.languages }}
      frameworks: ${{ steps.detect-frameworks.outputs.frameworks }}
      angular_version: ${{ steps.detect-angular-version.outputs.angular_version }}
      node_version: ${{ steps.determine-node.outputs.node_version }}
      branch_type: ${{ steps.branch-context.outputs.branch_type }}
      is_feature_branch: ${{ steps.branch-context.outputs.is_feature_branch }}
      is_dev_test: ${{ steps.branch-context.outputs.is_dev_test }}
      is_main: ${{ steps.branch-context.outputs.is_main }}
      is_pr_to_dev: ${{ steps.branch-context.outputs.is_pr_to_dev }}
      is_pr_to_main: ${{ steps.branch-context.outputs.is_pr_to_main }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze branch context
        id: branch-context
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Target branch: ${{ github.base_ref }}"
          
          # Déterminer le type de branche et les actions
          is_feature_branch=false
          is_dev_test=false
          is_main=false
          is_pr_to_dev=false
          is_pr_to_main=false
          branch_type="unknown"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "dev_test" ]]; then
              is_pr_to_dev=true
              branch_type="pr_to_dev"
            elif [[ "${{ github.base_ref }}" == "main" ]]; then
              is_pr_to_main=true
              branch_type="pr_to_main"
            fi
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            is_main=true
            branch_type="main"
          elif [[ "${{ github.ref_name }}" == "dev_test" ]]; then
            is_dev_test=true
            branch_type="dev_test"
          else
            is_feature_branch=true
            branch_type="feature"
          fi
          
          echo "branch_type=$branch_type" >> $GITHUB_OUTPUT
          echo "is_feature_branch=$is_feature_branch" >> $GITHUB_OUTPUT
          echo "is_dev_test=$is_dev_test" >> $GITHUB_OUTPUT
          echo "is_main=$is_main" >> $GITHUB_OUTPUT
          echo "is_pr_to_dev=$is_pr_to_dev" >> $GITHUB_OUTPUT
          echo "is_pr_to_main=$is_pr_to_main" >> $GITHUB_OUTPUT

      - name: Detect languages
        id: detect-langs
        run: |
          langs=$(gh api repos/${{ github.repository }}/languages --jq 'keys | join(",")')
          echo "languages=$langs" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect frameworks
        id: detect-frameworks
        run: |
          frameworks=""
          if [ -f package.json ]; then
            if grep -q '"@angular/core"' package.json; then
              frameworks+="Angular,"
            fi
            if grep -q '"react"' package.json; then
              frameworks+="React,"
            fi
            if grep -q '"express"' package.json; then
              frameworks+="Express,"
            fi
            if grep -q '"next"' package.json; then
              frameworks+="Next,"
            fi
          fi
          if [ -f requirements.txt ]; then
            if grep -qi 'django' requirements.txt; then
              frameworks+="Django,"
            fi
            if grep -qi 'flask' requirements.txt; then
              frameworks+="Flask,"
            fi
          fi
          echo "frameworks=$frameworks" >> $GITHUB_OUTPUT

      - name: Detect Angular version
        id: detect-angular-version
        run: |
          version=""
          if [ -f package.json ]; then
            version=$(jq -r '.dependencies["@angular/core"] // empty' package.json | sed 's/[^0-9.]//g' | cut -d '.' -f1)
          fi
          echo "angular_version=$version" >> $GITHUB_OUTPUT
          
      - name: Determine Node.js version from Angular version
        id: determine-node
        run: |
          angular_version="${{ steps.detect-angular-version.outputs.angular_version }}"
          node_version="20"  # valeur par défaut
          
          if [ "$angular_version" = "17" ]; then
            node_version="20"
          elif [ "$angular_version" = "16" ]; then
            node_version="18"
          elif [ "$angular_version" = "15" ]; then
            node_version="16"
          elif [ "$angular_version" = "13" ]; then
            node_version="12"
          fi
          echo "node_version=$node_version" >> $GITHUB_OUTPUT

  # =================== FEATURE BRANCHES ===================
  # Analyses légères sur les branches de feature (push direct)
  feature-branch-checks:
    name: 🔧 Feature Branch Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_feature_branch == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/feature-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== PULL REQUEST TO DEV_TEST ===================
  # Analyses complètes incluant ZAP pour les PR vers dev_test
  pr-to-dev-checks:
    name: 🧪 Dev Test PR Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_pr_to_dev == 'true'
    uses: ./.github/workflows/dev-pr-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== PULL REQUEST TO MAIN ===================
  # Analyses de production pour les PR vers main
  pr-to-main-checks:
    name: 🚀 Production PR Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_pr_to_main == 'true'
    uses: ./.github/workflows/prod-pr-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== DEV_TEST BRANCH ===================
  # Analyses lors des push sur dev_test
  dev-test-checks:
    name: 🧪 Dev Test Branch Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_dev_test == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/dev-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =================== MAIN BRANCH ===================
  # Analyses de production lors des push sur main
  main-branch-checks:
    name: 🚀 Production Analysis
    needs: detect-context
    if: needs.detect-context.outputs.is_main == 'true' && github.event_name == 'push'
    uses: ./.github/workflows/prod-analysis.yml
    with:
      frameworks: ${{ needs.detect-context.outputs.frameworks }}
      angular_version: ${{ needs.detect-context.outputs.angular_version }}
      node_version: ${{ needs.detect-context.outputs.node_version }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

 #================ SECURITY ISSUE CREATION ===================
  # Création/Mise à jour d'issues en cas de vulnérabilités critiques
  create-security-issues:
    name: 🛑 Security Issue Management
    runs-on: ubuntu-latest
    needs: [detect-context, feature-branch-checks, pr-to-dev-checks, pr-to-main-checks, dev-test-checks, main-branch-checks]
    if: always() && (needs.feature-branch-checks.result == 'success' || needs.pr-to-dev-checks.result == 'success' || needs.pr-to-main-checks.result == 'success' || needs.dev-test-checks.result == 'success' || needs.main-branch-checks.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-report"
          merge-multiple: true
          path: reports
        continue-on-error: true

      - name: Check for critical findings
        id: check-findings
        run: |
          critical=false
          summary=""

          if [ -d "reports" ]; then
            echo "🔍 Analysing security reports..."
            critical_count=$(find reports -type f -exec grep -i "critical" {} \; | wc -l || echo 0)
            if [ "$critical_count" -gt 0 ]; then
              critical=true
              summary="⚠️ $critical_count critical vulnerabilities found on branch '${{ github.ref_name }}'."
              echo "Security issues detected."
            fi
          fi

          echo "critical=$critical" >> $GITHUB_OUTPUT
          echo "summary=$summary" >> $GITHUB_OUTPUT

      - name: Create GitHub Security Issue (if not already open)
        if: steps.check-findings.outputs.critical == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          title="🔐 Security Alert - ${{ github.ref_name }}"
          body="${{ steps.check-findings.outputs.summary }}%0A%0APlease review the detailed reports in the 'reports' folder of this workflow run."

          echo "🔍 Checking for existing issue..."
          issue_number=$(gh issue list --state open --search "$title" --json number,title --jq '.[] | select(.title=="'"$title"'") | .number')

          if [ -n "$issue_number" ]; then
            echo "⚠️ An open issue with this title already exists (#$issue_number). Skipping creation."
            exit 0
          fi

          echo "🆕 No existing issue found — creating new one..."
          gh issue create \
            --title "$title" \
            --body "$body" \
            --label "security,automated" \
            --assignee "${{ github.actor }}"
